"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–∞.
"""

from __future__ import annotations
from typing import TYPE_CHECKING, Literal

if TYPE_CHECKING:
    from cardinal import Cortex # Renamed FPCortex to Cortex
    from tg_bot.bot import TGBot

from Utils import config_loader as cfg_loader, exceptions as excs, cardinal_tools # Renamed from Utils
from telebot.types import InlineKeyboardButton as Button, InlineKeyboardMarkup as K # –î–æ–±–∞–≤–∏–ª K
from tg_bot import utils, keyboards, CBT
from tg_bot.static_keyboards import CLEAR_STATE_BTN
from telebot import types
import logging
import os
from locales.localizer import Localizer # –ò–º–ø–æ—Ä—Ç Localizer

logger = logging.getLogger("TGBot")
localizer = Localizer() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
_ = localizer.translate # –ê–ª–∏–∞—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞

# –î–æ–±–∞–≤–∏–º –∫–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
# file_err_not_detected = "‚ùå –§–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω."
# file_err_must_be_text = "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, .txt, .cfg, .py, .json)."
# file_err_wrong_format = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: <b><u>.{actual_ext}</u></b> (–æ–∂–∏–¥–∞–ª—Å—è <b><u>.{expected_ext}</u></b>)."
# file_err_too_large = "‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20–ú–ë."
# file_info_downloading = "‚è¨ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª..."
# file_err_download_failed = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä."
# file_info_checking_validity = "üîÅ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞..."
# file_err_processing_generic = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: <code>{error_message}</code>"
# file_err_utf8_decode = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ UTF-8. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ = UTF-8, –∞ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫ = LF."
# file_info_main_cfg_loaded = "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.\n‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n–õ—é–±–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤ –ü–£ –æ—Ç–º–µ–Ω–∏—Ç —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
# file_info_ar_cfg_applied = "‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω."
# file_info_ad_cfg_applied = "‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω."
# plugin_uploaded_success = "‚úÖ –ü–ª–∞–≥–∏–Ω <code>{filename}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.\n\n‚ö†Ô∏è–ß—Ç–æ–±—ã –ø–ª–∞–≥–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è, <b><u>–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ FPCortex!</u></b> (/restart)"
# image_upload_unsupported_format = "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã: <code>.png</code>, <code>.jpg</code>, <code>.jpeg</code>, <code>.gif</code>." # –î–æ–±–∞–≤–ª–µ–Ω jpeg
# image_upload_error_generic = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ <code>logs/log.log</code>"
# image_upload_chat_success_info = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –≤ —Ç–µ–∫—Å—Ç–∞—Ö –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏/–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π <code>$photo</code>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>$photo={image_id}</code>"
# image_upload_offer_success_info = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∫ –ª–æ—Ç–∞–º."
# image_upload_success_header = "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä FunPay.\n\n<b>ID:</b> <code>{image_id}</code>\n\n"
# products_file_provide_prompt = "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (.txt):"
# products_file_upload_success = "‚úÖ –§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ <code>{filepath}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –¢–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ: <code>{count}</code>."
# products_file_count_error = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ."
# main_config_provide_prompt = "‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ (_main.cfg):"
# ar_config_provide_prompt = "ü§ñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ (auto_response.cfg):"
# ad_config_provide_prompt = "üì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ (auto_delivery.cfg):"

def check_file(tg: TGBot, msg: types.Message, type_: Literal["py", "cfg", "json", "txt"] | None = None) -> bool:
    bot = tg.bot # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    if not msg.document:
        bot.send_message(msg.chat.id, _("file_err_not_detected"))
        return False
    
    file_name = msg.document.file_name
    actual_ext = file_name.split('.')[-1].lower() if '.' in file_name else ""

    allowed_text_exts = ["cfg", "txt", "py", "json", "ini", "log"] # –†–∞—Å—à–∏—Ä–∏–º –Ω–µ–º–Ω–æ–≥–æ
    if actual_ext not in allowed_text_exts:
        bot.send_message(msg.chat.id, _("file_err_must_be_text"))
        return False
        
    if type_ is not None and actual_ext != type_.lower():
        bot.send_message(msg.chat.id, _("file_err_wrong_format", actual_ext=actual_ext, expected_ext=type_))
        return False
        
    if msg.document.file_size >= 20971520: # 20MB
        bot.send_message(msg.chat.id, _("file_err_too_large"))
        return False
    return True


def download_file(tg: TGBot, msg: types.Message, file_name: str = "temp_file.txt",
                  custom_path: str = "") -> str | None: # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ None
    bot = tg.bot
    bot.send_message(msg.chat.id, _("file_info_downloading"))
    try:
        file_info = bot.get_file(msg.document.file_id)
        downloaded_file_bytes = bot.download_file(file_info.file_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –æ—Ç Telegram: {e}")
        bot.send_message(msg.chat.id, _("file_err_download_failed"))
        logger.debug("TRACEBACK", exc_info=True)
        return None

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    target_dir = custom_path if custom_path else os.path.join("storage", "cache")
    os.makedirs(target_dir, exist_ok=True)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏ –Ω–µ "temp_file.txt"
    # –∏–ª–∏ –µ—Å–ª–∏ file_name –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ (—Ç.–µ. –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    final_file_name = msg.document.file_name if file_name == "temp_file.txt" else file_name
    
    full_path = os.path.join(target_dir, final_file_name)
    
    try:
        with open(full_path, "wb") as new_file:
            new_file.write(downloaded_file_bytes)
        return full_path # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {full_path}: {e}")
        bot.send_message(msg.chat.id, _("file_err_download_failed")) # –ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –æ—à–∏–±–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        return None


def init_uploader(cortex_instance: Cortex):
    tg = cortex_instance.telegram
    bot = tg.bot

    def act_upload_products_file(c: types.CallbackQuery):
        result = bot.send_message(c.message.chat.id, _("products_file_provide_prompt"),
                                  reply_markup=CLEAR_STATE_BTN())
        tg.set_state(c.message.chat.id, result.id, c.from_user.id, CBT.UPLOAD_PRODUCTS_FILE)
        bot.answer_callback_query(c.id)

    def upload_products_file(m: types.Message):
        tg.clear_state(m.chat.id, m.from_user.id, True)
        if not check_file(tg, m, type_="txt"):
            return
        
        # download_file —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        saved_file_path = download_file(tg, m, custom_path="storage/products")
        if not saved_file_path:
            return

        products_count_str = "‚ö†Ô∏è"
        try:
            products_count_str = str(cardinal_tools.count_products(saved_file_path))
        except Exception:
            bot.send_message(m.chat.id, _("products_file_count_error"))
            logger.debug("TRACEBACK", exc_info=True)
            # –§–∞–π–ª –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å –µ–≥–æ —Å—Ä–∞–∑—É

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ file_number –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ, –µ—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        # –ü—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
        products_dir = "storage/products"
        all_files_in_storage = sorted([f for f in os.listdir(products_dir) if f.endswith(".txt")]) if os.path.exists(products_dir) else []
        try:
            file_index_for_button = all_files_in_storage.index(os.path.basename(saved_file_path))
            offset_for_button = utils.get_offset(file_index_for_button, MENU_CFG.PF_BTNS_AMOUNT)
            edit_button = Button(_("gl_edit"), callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_index_for_button}:{offset_for_button}")
        except ValueError: # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
            edit_button = Button(_("ad_edit_goods_file"), callback_data=f"{CBT.PRODUCTS_FILES_LIST}:0") # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª–æ–≤

        keyboard_reply = K().add(edit_button)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET "
                    f"–∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ $YELLOW{saved_file_path}$RESET.")
        bot.send_message(m.chat.id,
                         _("products_file_upload_success", filepath=utils.escape(saved_file_path), count=products_count_str),
                         reply_markup=keyboard_reply)

    def act_upload_main_config(c: types.CallbackQuery):
        result = bot.send_message(c.message.chat.id, _("main_config_provide_prompt"),
                                  reply_markup=CLEAR_STATE_BTN())
        tg.set_state(c.message.chat.id, result.id, c.from_user.id, "upload_main_config")
        bot.answer_callback_query(c.id)

    def upload_main_config(m: types.Message):
        tg.clear_state(m.chat.id, m.from_user.id, True)
        if not check_file(tg, m, type_="cfg"):
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        temp_config_path = download_file(tg, m, file_name="temp_main.cfg") 
        if not temp_config_path:
            return

        bot.send_message(m.chat.id, _("file_info_checking_validity"))
        try:
            new_config = cfg_loader.load_main_config(temp_config_path)
        except excs.ConfigParseError as e:
            bot.send_message(m.chat.id, _("file_err_processing_generic", error_message=utils.escape(str(e))))
            if os.path.exists(temp_config_path): os.remove(temp_config_path) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            return
        except UnicodeDecodeError:
            bot.send_message(m.chat.id, _("file_err_utf8_decode"))
            if os.path.exists(temp_config_path): os.remove(temp_config_path)
            return
        except Exception as e: # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            bot.send_message(m.chat.id, _("file_err_processing_generic", error_message=utils.escape(str(e))))
            logger.debug("TRACEBACK", exc_info=True)
            if os.path.exists(temp_config_path): os.remove(temp_config_path)
            return

        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞, –∑–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
        cortex_instance.save_config(new_config, "configs/_main.cfg") # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
        if os.path.exists(temp_config_path): os.remove(temp_config_path) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET "
                    f"–∑–∞–≥—Ä—É–∑–∏–ª –≤ –±–æ—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥.")
        bot.send_message(m.chat.id, _("file_info_main_cfg_loaded"))

    def act_upload_auto_response_config(c: types.CallbackQuery):
        result = bot.send_message(c.message.chat.id, _("ar_config_provide_prompt"),
                                  reply_markup=CLEAR_STATE_BTN())
        tg.set_state(c.message.chat.id, result.id, c.from_user.id, "upload_auto_response_config")
        bot.answer_callback_query(c.id)

    def upload_auto_response_config(m: types.Message):
        tg.clear_state(m.chat.id, m.from_user.id, True)
        if not check_file(tg, m, type_="cfg"):
            return
        
        temp_ar_cfg_path = download_file(tg, m, file_name="temp_auto_response.cfg")
        if not temp_ar_cfg_path:
            return

        bot.send_message(m.chat.id, _("file_info_checking_validity"))
        try:
            new_ar_config = cfg_loader.load_auto_response_config(temp_ar_cfg_path)
            raw_new_ar_config = cfg_loader.load_raw_auto_response_config(temp_ar_cfg_path)
        except excs.ConfigParseError as e:
            bot.send_message(m.chat.id, _("file_err_processing_generic", error_message=utils.escape(str(e))))
            if os.path.exists(temp_ar_cfg_path): os.remove(temp_ar_cfg_path)
            return
        except UnicodeDecodeError:
            bot.send_message(m.chat.id, _("file_err_utf8_decode"))
            if os.path.exists(temp_ar_cfg_path): os.remove(temp_ar_cfg_path)
            return
        except Exception as e:
            bot.send_message(m.chat.id, _("file_err_processing_generic", error_message=utils.escape(str(e))))
            logger.debug("TRACEBACK", exc_info=True)
            if os.path.exists(temp_ar_cfg_path): os.remove(temp_ar_cfg_path)
            return

        cortex_instance.RAW_AR_CFG, cortex_instance.AR_CFG = raw_new_ar_config, new_ar_config
        cortex_instance.save_config(cortex_instance.RAW_AR_CFG, "configs/auto_response.cfg")
        if os.path.exists(temp_ar_cfg_path): os.remove(temp_ar_cfg_path)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET "
                    f"–∑–∞–≥—Ä—É–∑–∏–ª –∏ –ø—Ä–∏–º–µ–Ω–∏–ª –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.")
        bot.send_message(m.chat.id, _("file_info_ar_cfg_applied"))

    def act_upload_auto_delivery_config(c: types.CallbackQuery):
        result = bot.send_message(c.message.chat.id, _("ad_config_provide_prompt"),
                                  reply_markup=CLEAR_STATE_BTN())
        tg.set_state(c.message.chat.id, result.id, c.from_user.id, "upload_auto_delivery_config")
        bot.answer_callback_query(c.id)

    def upload_auto_delivery_config(m: types.Message):
        tg.clear_state(m.chat.id, m.from_user.id, True)
        if not check_file(tg, m, type_="cfg"):
            return
        
        temp_ad_cfg_path = download_file(tg, m, file_name="temp_auto_delivery.cfg")
        if not temp_ad_cfg_path:
            return

        bot.send_message(m.chat.id, _("file_info_checking_validity"))
        try:
            new_ad_config = cfg_loader.load_auto_delivery_config(temp_ad_cfg_path)
        except excs.ConfigParseError as e:
            bot.send_message(m.chat.id, _("file_err_processing_generic", error_message=utils.escape(str(e))))
            if os.path.exists(temp_ad_cfg_path): os.remove(temp_ad_cfg_path)
            return
        except UnicodeDecodeError:
            bot.send_message(m.chat.id, _("file_err_utf8_decode"))
            if os.path.exists(temp_ad_cfg_path): os.remove(temp_ad_cfg_path)
            return
        except Exception as e:
            bot.send_message(m.chat.id, _("file_err_processing_generic", error_message=utils.escape(str(e))))
            logger.debug("TRACEBACK", exc_info=True)
            if os.path.exists(temp_ad_cfg_path): os.remove(temp_ad_cfg_path)
            return

        cortex_instance.AD_CFG = new_ad_config
        cortex_instance.save_config(cortex_instance.AD_CFG, "configs/auto_delivery.cfg")
        if os.path.exists(temp_ad_cfg_path): os.remove(temp_ad_cfg_path)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET "
                    f"–∑–∞–≥—Ä—É–∑–∏–ª –∏ –ø—Ä–∏–º–µ–Ω–∏–ª –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.")
        bot.send_message(m.chat.id, _("file_info_ad_cfg_applied"))

    def upload_plugin_handler(m: types.Message): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å CBT.UPLOAD_PLUGIN
        state_data = tg.get_state(m.chat.id, m.from_user.id)
        offset = state_data["data"].get("offset", 0) if state_data and state_data.get("data") else 0
        tg.clear_state(m.chat.id, m.from_user.id, True)
        
        if not check_file(tg, m, type_="py"):
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø–ª–∞–≥–∏–Ω–∞
        saved_plugin_path = download_file(tg, m, custom_path="plugins")
        if not saved_plugin_path:
            return

        original_plugin_filename = os.path.basename(saved_plugin_path)

        logger.info(f"[IMPORTANT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET "
                    f"–∑–∞–≥—Ä—É–∑–∏–ª –ø–ª–∞–≥–∏–Ω $YELLOW{saved_plugin_path}$RESET.")

        # gl_back —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
        keyboard_reply = K().add(Button(_("gl_back"), callback_data=f"{CBT.PLUGINS_LIST}:{offset}"))
        # plugin_uploaded_success —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
        bot.send_message(m.chat.id,
                         _("plugin_uploaded_success", filename=utils.escape(original_plugin_filename)),
                         reply_markup=keyboard_reply)

    def send_funpay_image_handler(m: types.Message): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        state_data = tg.get_state(m.chat.id, m.from_user.id)
        if not state_data or not state_data.get("data"): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ. –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º.
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ FunPay –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {m.from_user.id}")
            return

        node_id = state_data["data"].get("node_id")
        username = state_data["data"].get("username")
        tg.clear_state(m.chat.id, m.from_user.id, True)

        if node_id is None or username is None: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç node_id –∏–ª–∏ username –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è FunPay (user: {m.from_user.id})")
            bot.reply_to(m, _("gl_error_try_again"))
            return

        if not m.photo:
            # image_upload_unsupported_format —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
            bot.send_message(m.chat.id, _("image_upload_unsupported_format"))
            return
            
        photo_obj = m.photo[-1] # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        if photo_obj.file_size >= 20971520: # 20MB
            bot.send_message(m.chat.id, _("file_err_too_large"))
            return

        try:
            file_info = bot.get_file(photo_obj.file_id)
            downloaded_image_bytes = bot.download_file(file_info.file_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ FunPay
            image_id_on_fp = cortex_instance.account.upload_image(downloaded_image_bytes, type_="chat")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            send_result = cortex_instance.account.send_message(node_id, None, username, image_id_on_fp)
            
            reply_keyboard_after_send = keyboards.reply(node_id, username, again=True, extend=True) # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–∞
            if not send_result:
                # msg_sending_error —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
                bot.reply_to(m, _("msg_sending_error", node_id, username), reply_markup=reply_keyboard_after_send)
                return
            # msg_sent —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
            bot.reply_to(m, _("msg_sent", node_id, username), reply_markup=reply_keyboard_after_send)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç FunPay {node_id}: {e}")
            logger.debug("TRACEBACK", exc_info=True)
            # image_upload_error_generic —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
            bot.reply_to(m, _("image_upload_error_generic"),
                         reply_markup=keyboards.reply(node_id, username, again=True, extend=True)) # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            return

    def upload_image_generic_handler(m: types.Message, image_type: Literal["chat", "offer"]): # –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è /upload_chat_img –∏ /upload_offer_img
        tg.clear_state(m.chat.id, m.from_user.id, True)
        if not m.photo:
            bot.send_message(m.chat.id, _("image_upload_unsupported_format"))
            return
            
        photo_obj = m.photo[-1]
        if photo_obj.file_size >= 20971520: # 20MB
            bot.send_message(m.chat.id, _("file_err_too_large"))
            return

        try:
            file_info = bot.get_file(photo_obj.file_id)
            downloaded_image_bytes = bot.download_file(file_info.file_path)
            image_id_on_fp = cortex_instance.account.upload_image(downloaded_image_bytes, type_=image_type)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ '{image_type}': {e}")
            logger.debug("TRACEBACK", exc_info=True)
            bot.reply_to(m, _("image_upload_error_generic"))
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # image_upload_success_header —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
        success_message_header = _("image_upload_success_header", image_id=image_id_on_fp)
        
        additional_info_key = "image_upload_chat_success_info" if image_type == "chat" else "image_upload_offer_success_info"
        additional_info_text = _(additional_info_key, image_id=image_id_on_fp) # –ü–µ—Ä–µ–¥–∞–µ–º image_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        bot.reply_to(m, f"{success_message_header}{additional_info_text}")

    def upload_chat_image_handler(m: types.Message):
        upload_image_generic_handler(m, type_="chat")

    def upload_offer_image_handler(m: types.Message):
        upload_image_generic_handler(m, type_="offer")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    tg.cbq_handler(act_upload_products_file, lambda c: c.data == CBT.UPLOAD_PRODUCTS_FILE)
    tg.cbq_handler(act_upload_auto_response_config, lambda c: c.data == "upload_auto_response_config")
    tg.cbq_handler(act_upload_auto_delivery_config, lambda c: c.data == "upload_auto_delivery_config")
    tg.cbq_handler(act_upload_main_config, lambda c: c.data == "upload_main_config")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
    tg.file_handler(CBT.UPLOAD_PRODUCTS_FILE, upload_products_file)
    tg.file_handler("upload_auto_response_config", upload_auto_response_config)
    tg.file_handler("upload_auto_delivery_config", upload_auto_delivery_config)
    tg.file_handler("upload_main_config", upload_main_config)
    tg.file_handler(CBT.UPLOAD_PLUGIN, upload_plugin_handler) # –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Ö—ç–Ω–¥–ª–µ—Ä–∞
    tg.file_handler(CBT.SEND_FP_MESSAGE, send_funpay_image_handler) # –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Ö—ç–Ω–¥–ª–µ—Ä–∞ (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —á–∞—Ç FunPay)
    tg.file_handler(CBT.UPLOAD_CHAT_IMAGE, upload_chat_image_handler) # –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Ö—ç–Ω–¥–ª–µ—Ä–∞
    tg.file_handler(CBT.UPLOAD_OFFER_IMAGE, upload_offer_image_handler) # –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Ö—ç–Ω–¥–ª–µ—Ä–∞


BIND_TO_PRE_INIT = [init_uploader]