# START OF FILE FunPayCortex/tg_bot/utils.py

"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram –±–æ—Ç.
"""

from __future__ import annotations

import math
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from cortex import Cortex

from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
import configparser
import datetime
import os.path
import json
import time

import Utils.cortex_tools
from tg_bot import CBT
from locales.localizer import Localizer

localizer = Localizer()
_ = localizer.translate

class NotificationTypes:
    """
    –ö–ª–∞—Å—Å —Å —Ç–∏–ø–∞–º–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    bot_start = "1"
    new_message = "2"
    command = "3"
    new_order = "4"
    order_confirmed = "5"
    review = "5r"
    lots_restore = "6"
    lots_deactivate = "7"
    delivery = "8"
    lots_raise = "9"
    other = "10"
    announcement = "11"
    ad = "12"
    critical = "13"
    important_announcement = "14"


def load_authorized_users() -> dict[int, dict[str, bool | None | str]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞.
    """
    filepath = "storage/cache/tg_authorized_users.json"
    if not os.path.exists(filepath):
        return {}
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        result = {}
        if isinstance(data, list):
            for user_id_val in data:
                if isinstance(user_id_val, int):
                    result[user_id_val] = {} 
            save_authorized_users(result)
        elif isinstance(data, dict):
            for k, v in data.items():
                try:
                    result[int(k)] = v
                except ValueError:
                    continue
        return result
    except (json.JSONDecodeError, FileNotFoundError):
        return {}


def load_notification_settings() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞.
    """
    filepath = "storage/cache/notifications.json"
    if not os.path.exists(filepath):
        return {}
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return {}


def load_answer_templates() -> list[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –∫—ç—à–∞.
    """
    filepath = "storage/cache/answer_templates.json"
    if not os.path.exists(filepath):
        return []
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            templates = json.load(f)
            return [str(item) for item in templates if isinstance(item, (str, int, float))] if isinstance(templates, list) else []
    except (json.JSONDecodeError, FileNotFoundError):
        return []


def save_authorized_users(users: dict[int, dict]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    dir_path = "storage/cache/"
    if not os.path.exists(dir_path):
        os.makedirs(dir_path, exist_ok=True)
    with open(os.path.join(dir_path, "tg_authorized_users.json"), "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)


def save_notification_settings(settings: dict) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    dir_path = "storage/cache/"
    if not os.path.exists(dir_path):
        os.makedirs(dir_path, exist_ok=True)
    with open(os.path.join(dir_path, "notifications.json"), "w", encoding="utf-8") as f:
        json.dump(settings, f, ensure_ascii=False, indent=4)


def save_answer_templates(templates: list[str]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤.
    """
    dir_path = "storage/cache/"
    if not os.path.exists(dir_path):
        os.makedirs(dir_path, exist_ok=True)
    with open(os.path.join(dir_path, "answer_templates.json"), "w", encoding="utf-8") as f:
        json.dump(templates, f, ensure_ascii=False, indent=4)


def escape(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ HTML —Ä–∞–∑–º–µ—Ç–∫—É.
    """
    if not isinstance(text, str):
        text = str(text)
    escape_characters = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
    }
    for char, escaped_char in escape_characters.items():
        text = text.replace(char, escaped_char)
    return text

def split_by_limit(list_of_str: list[str], limit: int = 4096):
    result = []
    current_chunk = ""
    for s_item in list_of_str:
        if len(current_chunk) + len(s_item) + 1 > limit:
            result.append(current_chunk)
            current_chunk = s_item
        else:
            if current_chunk:
                current_chunk += "\n" + s_item
            else:
                current_chunk = s_item
    if current_chunk:
        result.append(current_chunk)
    return result


def bool_to_text(value: bool | int | str | None, on: str = "üü¢", off: str = "üî¥"):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏.
    """
    if value is not None:
        try:
            if int(value):
                return on
        except ValueError:
            pass
    return off


def get_offset(element_index: int, max_elements_on_page: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º element_index –æ–∫–∞–∑–∞–ª—Å—è –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞.
    """
    elements_amount = element_index + 1
    elements_on_page = elements_amount % max_elements_on_page
    elements_on_page = elements_on_page if elements_on_page else max_elements_on_page
    if not elements_amount - elements_on_page:
        return 0
    else:
        return element_index - elements_on_page + 1


def add_navigation_buttons(keyboard_obj: K, curr_offset: int,
                           max_elements_on_page: int,
                           elements_on_page: int, elements_amount: int,
                           callback_text: str,
                           extra: list | None = None) -> K:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥. / –ø—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    """
    extra_cb_part = (":" + ":".join(str(i) for i in extra)) if extra else ""
    
    first_page_cb = f"{callback_text}:0{extra_cb_part}" if curr_offset > 0 else CBT.EMPTY
    
    last_page_offset = 0
    if elements_amount > 0:
        num_pages = math.ceil(elements_amount / max_elements_on_page)
        last_page_offset = (num_pages - 1) * max_elements_on_page if num_pages > 0 else 0
    
    last_page_cb = f"{callback_text}:{last_page_offset}{extra_cb_part}" if curr_offset + elements_on_page < elements_amount else CBT.EMPTY

    prev_page_offset = max(0, curr_offset - max_elements_on_page)
    prev_page_cb = f"{callback_text}:{prev_page_offset}{extra_cb_part}" if curr_offset > 0 else CBT.EMPTY
    
    next_page_offset = curr_offset + elements_on_page
    next_page_cb = f"{callback_text}:{next_page_offset}{extra_cb_part}" if curr_offset + elements_on_page < elements_amount else CBT.EMPTY

    current_page_num = (curr_offset // max_elements_on_page) + 1
    total_pages_num = math.ceil(elements_amount / max_elements_on_page) if elements_amount > 0 else 1
    
    page_info_text = f"{current_page_num}/{total_pages_num}"

    nav_buttons = []
    if curr_offset > 0 :
        nav_buttons.append(B("‚è™", callback_data=first_page_cb))
        nav_buttons.append(B(_("gl_back").split(' ')[-1], callback_data=prev_page_cb))

    nav_buttons.append(B(page_info_text, callback_data=CBT.EMPTY))

    if curr_offset + elements_on_page < elements_amount:
        nav_buttons.append(B(_("gl_next").split(' ')[0], callback_data=next_page_cb))
        nav_buttons.append(B("‚è©", callback_data=last_page_cb))
    
    if len(nav_buttons) > 1:
        keyboard_obj.row(*nav_buttons)
    return keyboard_obj


def generate_profile_text(cortex_instance: Cortex) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.
    """
    account = cortex_instance.account
    balance = cortex_instance.balance

    profile_header = _("cmd_profile")
    if "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å" in profile_header.lower():
        profile_header = profile_header.split(" ",1)[1].capitalize()
    elif "–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏" in profile_header.lower():
        profile_header = profile_header.split(" ",1)[1].capitalize()
    elif "view" in profile_header.lower():
         profile_header = profile_header.split(" ",1)[1].capitalize()

    active_orders_label_key = "ns_new_order"
    active_orders_label_full = _(active_orders_label_key)
    active_orders_text = active_orders_label_full.split(" ", 1)[1] if "{}" in active_orders_label_full.split(" ", 1)[0] else active_orders_label_full

    fpc_init_text = _('fpc_init')
    balance_label_text_raw = ""
    for line in fpc_init_text.splitlines():
        if "‚ÇΩ" in line and "$" in line and "‚Ç¨" in line and "–ë–∞–ª–∞–Ω—Å:" in line:
            parts = line.split("<code>",1)
            if parts:
                balance_label_text_raw = parts[0].strip()
            break
    if not balance_label_text_raw or "–ë–∞–ª–∞–Ω—Å" not in balance_label_text_raw:
        balance_label_text_raw = "<b><i>" + _("mm_balance") + ":</i></b>"


    return f"""üìä <b>{profile_header} ¬´{escape(account.username)}¬ª</b>

üÜî <b>ID:</b> <code>{account.id}</code>
üõí <b>{active_orders_text}:</b> <code>{account.active_sales}</code>
{balance_label_text_raw}
    üá∑üá∫ <b>RUB:</b> <code>{balance.total_rub}‚ÇΩ</code> ({_('acc_balance_available')} <code>{balance.available_rub}‚ÇΩ</code>)
    üá∫üá∏ <b>USD:</b> <code>{balance.total_usd}$</code> ({_('acc_balance_available')} <code>{balance.available_usd}$</code>)
    üá™üá∫ <b>EUR:</b> <code>{balance.total_eur}‚Ç¨</code> ({_('acc_balance_available')} <code>{balance.available_eur}‚Ç¨</code>)

‚è±Ô∏è {_('gl_last_update')}: <code>{time.strftime('%H:%M:%S %d.%m.%Y', time.localtime(account.last_update))}</code>"""

def generate_lot_info_text(lot_obj: configparser.SectionProxy) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ—Ç–µ.
    """
    products_file_name = lot_obj.get("productsFileName")
    file_info_text = ""
    products_amount_text = f"<code>‚àû</code> ({_('gf_infinity')})"

    if products_file_name:
        full_file_path = os.path.join("storage", "products", products_file_name)
        file_info_text = f"<code>{escape(full_file_path)}</code>"
        if os.path.exists(full_file_path):
            try:
                count = Utils.cortex_tools.count_products(full_file_path)
                products_amount_text = f"<code>{count}</code>"
            except Exception:
                products_amount_text = f"<code>‚ö†Ô∏è</code> ({_('gf_count_error')})"
        else:
            file_info_text += f" ({_('gf_file_not_found_short')})"
            products_amount_text = "<code>-</code>"
            try:
                if not os.path.exists(os.path.dirname(full_file_path)):
                     os.makedirs(os.path.dirname(full_file_path), exist_ok=True)
                with open(full_file_path, "w", encoding="utf-8"): pass
                file_info_text += f" ({_('gf_file_created_now')})"
            except Exception as e:
                file_info_text += f" ({_('gf_file_creation_error_short')})"

    else:
        file_info_text = f"<i>({_('gf_not_linked')})</i>"

    
    return f"""üì¶ <b>{_('lot_info_header')}: ¬´{escape(lot_obj.name)}¬ª</b>

üìú <b>{_('ea_edit_delivery_text').replace('‚úèÔ∏è ','')}:</b>
<code>{escape(lot_obj.get("response", _("text_not_set")))}</code>

üî¢ <b>{_('gf_amount')}:</b> {products_amount_text}
üóÇÔ∏è <b>{_('ea_link_goods_file').replace('üîó ','')}:</b> {file_info_text}

‚è±Ô∏è {_('gl_last_update')}: <code>{datetime.datetime.now().strftime('%H:%M:%S %d.%m.%Y')}</code>"""
# END OF FILE FunPayCortex/tg_bot/utils.py