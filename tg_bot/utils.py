"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram –±–æ—Ç.
"""

from __future__ import annotations

import math
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from cortex import Cortex # Renamed FPCortex to Cortex

from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
import configparser
import datetime
import os.path
import json
import time

import Utils.cortex_tools # Renamed from Utils to Utils
from tg_bot import CBT
from locales.localizer import Localizer # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Localizer

localizer = Localizer() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Localizer
_ = localizer.translate # –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞

class NotificationTypes:
    """
    –ö–ª–∞—Å—Å —Å —Ç–∏–ø–∞–º–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    """
    bot_start = "1"
    new_message = "2"
    command = "3"
    new_order = "4"
    order_confirmed = "5"
    review = "5r"
    lots_restore = "6"
    lots_deactivate = "7"
    delivery = "8"
    lots_raise = "9"
    other = "10"
    announcement = "11"
    ad = "12"
    critical = "13"
    important_announcement = "14"


def load_authorized_users() -> dict[int, dict[str, bool | None | str]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞.
    (–õ–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω)
    """
    filepath = "storage/cache/tg_authorized_users.json"
    if not os.path.exists(filepath):
        return {}
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            data = json.load(f) # –ò—Å–ø–æ–ª—å–∑—É–µ–º json.load –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
        
        result = {}
        if isinstance(data, list): # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (—Å–ø–∏—Å–æ–∫ ID)
            for user_id_val in data:
                if isinstance(user_id_val, int): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ int
                    result[user_id_val] = {} 
            save_authorized_users(result) # –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        elif isinstance(data, dict): # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å–ª–æ–≤–∞—Ä—å)
            for k, v in data.items():
                try: # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ int, –µ—Å–ª–∏ –æ–Ω–∏ —Å—Ç—Ä–æ–∫–∏
                    result[int(k)] = v
                except ValueError:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–ª—é—á–∏
                    continue
        return result
    except (json.JSONDecodeError, FileNotFoundError): # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return {}


def load_notification_settings() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞.
    (–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞)
    """
    filepath = "storage/cache/notifications.json"
    if not os.path.exists(filepath):
        return {}
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return {}


def load_answer_templates() -> list[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –∫—ç—à–∞.
    (–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞)
    """
    filepath = "storage/cache/answer_templates.json"
    if not os.path.exists(filepath):
        return []
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            templates = json.load(f)
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
            return [str(item) for item in templates if isinstance(item, (str, int, float))] if isinstance(templates, list) else []
    except (json.JSONDecodeError, FileNotFoundError):
        return []


def save_authorized_users(users: dict[int, dict]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ, –Ω–æ —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞)
    """
    dir_path = "storage/cache/"
    if not os.path.exists(dir_path):
        os.makedirs(dir_path, exist_ok=True) # exist_ok=True —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å
    with open(os.path.join(dir_path, "tg_authorized_users.json"), "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4) # ensure_ascii=False –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã, indent –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏


def save_notification_settings(settings: dict) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    (–£–ª—É—á—à–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON)
    """
    dir_path = "storage/cache/"
    if not os.path.exists(dir_path):
        os.makedirs(dir_path, exist_ok=True)
    with open(os.path.join(dir_path, "notifications.json"), "w", encoding="utf-8") as f:
        json.dump(settings, f, ensure_ascii=False, indent=4)


def save_answer_templates(templates: list[str]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤.
    (–£–ª—É—á—à–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON)
    """
    dir_path = "storage/cache/"
    if not os.path.exists(dir_path):
        os.makedirs(dir_path, exist_ok=True)
    with open(os.path.join(dir_path, "answer_templates.json"), "w", encoding="utf-8") as f:
        json.dump(templates, f, ensure_ascii=False, indent=4)


def escape(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ HTML —Ä–∞–∑–º–µ—Ç–∫—É.
    (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    """
    if not isinstance(text, str): # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        text = str(text)
    escape_characters = {
        "&": "&",
        "<": "<",
        ">": ">",
    }
    for char, escaped_char in escape_characters.items():
        text = text.replace(char, escaped_char)
    return text

# –§—É–Ω–∫—Ü–∏—è split_by_limit –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def split_by_limit(list_of_str: list[str], limit: int = 4096):
    result = []
    current_chunk = ""
    for s_item in list_of_str:
        if len(current_chunk) + len(s_item) + 1 > limit: # +1 –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ \n
            result.append(current_chunk)
            current_chunk = s_item
        else:
            if current_chunk: # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—á–∞–ª–æ —á–∞–Ω–∫–∞
                current_chunk += "\n" + s_item
            else:
                current_chunk = s_item
    if current_chunk: # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
        result.append(current_chunk)
    return result


def bool_to_text(value: bool | int | str | None, on: str = "üü¢", off: str = "üî¥"):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏.
    (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ —ç–º–æ–¥–∑–∏ —É–∂–µ —Ö–æ—Ä–æ—à–∏–µ)
    """
    if value is not None:
        try:
            if int(value):
                return on
        except ValueError: # –ï—Å–ª–∏ value - —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–ª—å–∑—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ int
            pass # –û—Å—Ç–∞–≤–ª—è–µ–º off –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return off


def get_offset(element_index: int, max_elements_on_page: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º element_index –æ–∫–∞–∑–∞–ª—Å—è –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞.
    (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    """
    elements_amount = element_index + 1
    elements_on_page = elements_amount % max_elements_on_page
    elements_on_page = elements_on_page if elements_on_page else max_elements_on_page
    if not elements_amount - elements_on_page:
        return 0
    else:
        return element_index - elements_on_page + 1


def add_navigation_buttons(keyboard_obj: K, curr_offset: int,
                           max_elements_on_page: int,
                           elements_on_page: int, elements_amount: int,
                           callback_text: str,
                           extra: list | None = None) -> K:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥. / –ø—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    (–¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –∏–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏)
    """
    extra_cb_part = (":" + ":".join(str(i) for i in extra)) if extra else ""
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    first_page_cb = f"{callback_text}:0{extra_cb_part}" if curr_offset > 0 else CBT.EMPTY
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 0, —Ç–æ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü 0, last_page_offset –Ω–µ –Ω—É–∂–µ–Ω
    last_page_offset = 0
    if elements_amount > 0:
        num_pages = math.ceil(elements_amount / max_elements_on_page)
        last_page_offset = (num_pages - 1) * max_elements_on_page if num_pages > 0 else 0
    
    last_page_cb = f"{callback_text}:{last_page_offset}{extra_cb_part}" if curr_offset + elements_on_page < elements_amount else CBT.EMPTY

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    prev_page_offset = max(0, curr_offset - max_elements_on_page)
    prev_page_cb = f"{callback_text}:{prev_page_offset}{extra_cb_part}" if curr_offset > 0 else CBT.EMPTY
    
    next_page_offset = curr_offset + elements_on_page
    next_page_cb = f"{callback_text}:{next_page_offset}{extra_cb_part}" if curr_offset + elements_on_page < elements_amount else CBT.EMPTY

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    current_page_num = (curr_offset // max_elements_on_page) + 1
    total_pages_num = math.ceil(elements_amount / max_elements_on_page) if elements_amount > 0 else 1
    
    page_info_text = f"{current_page_num}/{total_pages_num}"

    nav_buttons = []
    if curr_offset > 0 : # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        nav_buttons.append(B("‚è™", callback_data=first_page_cb)) # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        nav_buttons.append(B(_("gl_back").split(' ')[0], callback_data=prev_page_cb)) # –ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ "–ù–∞–∑–∞–¥ ‚óÄÔ∏è"

    nav_buttons.append(B(page_info_text, callback_data=CBT.EMPTY)) # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    if curr_offset + elements_on_page < elements_amount: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        nav_buttons.append(B(_("gl_next").split(' ')[0], callback_data=next_page_cb)) # –°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ "–î–∞–ª–µ–µ ‚ñ∂Ô∏è"
        nav_buttons.append(B("‚è©", callback_data=last_page_cb)) # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    
    if len(nav_buttons) > 1: # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∫—Ä–æ–º–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard_obj.row(*nav_buttons)
    return keyboard_obj


def generate_profile_text(cortex_instance: Cortex) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.
    (–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
    """
    account = cortex_instance.account
    balance = cortex_instance.balance
    # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –ø–æ–ª–µ–π
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ {username}
    # ID: {id}
    # –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {active_sales}
    # –ë–∞–ª–∞–Ω—Å:
    #   RUB: {total_rub}‚ÇΩ (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_rub}‚ÇΩ)
    #   USD: {total_usd}$ (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_usd}$)
    #   EUR: {total_eur}‚Ç¨ (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_eur}‚Ç¨)
    # –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_update_time}

    profile_header = _("cmd_profile") # "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞" - –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"
    if "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å" in profile_header: # –£–±–∏—Ä–∞–µ–º –≥–ª–∞–≥–æ–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        profile_header = profile_header.split(" ",1)[1].capitalize()

    return f"""üìä <b>{profile_header} ¬´{escape(account.username)}¬ª</b>

üÜî <b>ID:</b> <code>{account.id}</code>
üõí <b>{_('ntfc_new_order').split(':')[0].replace('üí∞ ','')}:</b> <code>{account.active_sales}</code> 
{_('fpc_init').splitlines()[3].split(':')[0].strip()}:
    üá∑üá∫ <b>RUB:</b> <code>{balance.total_rub}‚ÇΩ</code> ({_('acc_balance_available', language=localizer.current_language)} <code>{balance.available_rub}‚ÇΩ</code>)
    üá∫üá∏ <b>USD:</b> <code>{balance.total_usd}$</code> ({_('acc_balance_available', language=localizer.current_language)} <code>{balance.available_usd}$</code>)
    üá™üá∫ <b>EUR:</b> <code>{balance.total_eur}‚Ç¨</code> ({_('acc_balance_available', language=localizer.current_language)} <code>{balance.available_eur}‚Ç¨</code>)

‚è±Ô∏è <i>{_('gl_last_update')}:</i> <code>{time.strftime('%H:%M:%S %d.%m.%Y', time.localtime(account.last_update))}</code>"""
    # –î–æ–±–∞–≤–∏–ª –∫–ª—é—á 'acc_balance_available' = "–¥–æ—Å—Ç—É–ø–Ω–æ" –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

def generate_lot_info_text(lot_obj: configparser.SectionProxy) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ—Ç–µ.
    (–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∞–π–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤
    products_file_name = lot_obj.get("productsFileName")
    file_info_text = ""
    products_amount_text = f"<code>‚àû</code> ({_('gf_infinity', language=localizer.current_language)})" # –ö–ª—é—á –¥–ª—è "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ"

    if products_file_name:
        full_file_path = os.path.join("storage", "products", products_file_name)
        file_info_text = f"<code>{escape(full_file_path)}</code>"
        if os.path.exists(full_file_path):
            try:
                count = Utils.cortex_tools.count_products(full_file_path)
                products_amount_text = f"<code>{count}</code>"
            except Exception:
                products_amount_text = f"<code>‚ö†Ô∏è</code> ({_('gf_count_error', language=localizer.current_language)})" # –ö–ª—é—á –¥–ª—è "–æ—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞"
        else: # –§–∞–π–ª —É–∫–∞–∑–∞–Ω, –Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            file_info_text += f" ({_('gf_file_not_found_short', language=localizer.current_language)})" # –ö–ª—é—á –¥–ª—è "–Ω–µ –Ω–∞–π–¥–µ–Ω"
            products_amount_text = "<code>-</code>" # –ü—Ä–æ—á–µ—Ä–∫, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏
            try:
                if not os.path.exists(os.path.dirname(full_file_path)):
                     os.makedirs(os.path.dirname(full_file_path), exist_ok=True)
                with open(full_file_path, "w", encoding="utf-8"): pass
                file_info_text += f" ({_('gf_file_created_now', language=localizer.current_language)})" # –ö–ª—é—á –¥–ª—è "—Å–æ–∑–¥–∞–Ω —Å–µ–π—á–∞—Å"
            except Exception as e:
                file_info_text += f" ({_('gf_file_creation_error_short', language=localizer.current_language)})" # –ö–ª—é—á –¥–ª—è "–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è"

    else:
        file_info_text = f"<i>({_('gf_not_linked', language=localizer.current_language)})</i>" # –ö–ª—é—á –¥–ª—è "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"

    # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ: {lot_name}
    # –¢–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏: {response_text}
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {products_count}
    # –§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏: {file_path_info}
    # –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}
    
    return f"""üì¶ <b>{_('lot_info_header', language=localizer.current_language)}: ¬´{escape(lot_obj.name)}¬ª</b>

üìú <b>{_('ea_edit_delivery_text').replace('‚úèÔ∏è ','')}:</b>
<code>{escape(lot_obj.get("response", _("text_not_set", language=localizer.current_language)))}</code>

üî¢ <b>{_('gf_amount')}:</b> {products_amount_text}
üóÇÔ∏è <b>{_('ea_link_goods_file').replace('üîó ','')}:</b> {file_info_text}

‚è±Ô∏è <i>{_('gl_last_update')}:</i> <code>{datetime.datetime.now().strftime('%H:%M:%S %d.%m.%Y')}</code>"""
# –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏:
# 'acc_balance_available'
# 'gf_infinity'
# 'gf_count_error'
# 'gf_file_not_found_short'
# 'gf_file_created_now'
# 'gf_file_creation_error_short'
# 'gf_not_linked'
# 'lot_info_header'
# 'text_not_set'