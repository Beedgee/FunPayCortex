# START OF FILE FunPayCortex-main/tg_bot/crm_cp.py

# tg_bot/crm_cp.py
from __future__ import annotations
from typing import TYPE_CHECKING
import os
import json
import time
import logging
from threading import Thread

from FunPayAPI.common.enums import OrderStatuses
from FunPayAPI.updater.events import NewOrderEvent, InitialChatEvent, OrderStatusChangedEvent

from locales.localizer import Localizer

if TYPE_CHECKING:
    from cortex import Cortex

logger = logging.getLogger("FPC.crm_cp")
localizer = Localizer()
_ = localizer.translate

CRM_FILE_PATH = "storage/cache/crm_data.json"

def load_crm_data(cortex: Cortex):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ CRM –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(CRM_FILE_PATH):
        try:
            with open(CRM_FILE_PATH, "r", encoding="utf-8") as f:
                cortex.crm_data = {int(k): v for k, v in json.load(f).items()}
        except (json.JSONDecodeError, IOError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö CRM: {e}")
            cortex.crm_data = {}
    else:
        cortex.crm_data = {}

def save_crm_data(cortex: Cortex):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ CRM –≤ —Ñ–∞–π–ª."""
    try:
        with open(CRM_FILE_PATH, "w", encoding="utf-8") as f:
            json.dump(cortex.crm_data, f, ensure_ascii=False, indent=2)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö CRM: {e}")

def get_or_create_customer(cortex: Cortex, user_id: int, username: str | None) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ CRM."""
    if user_id not in cortex.crm_data:
        cortex.crm_data[user_id] = {
            "username": username,
            "first_contact_ts": int(time.time()),
            "last_contact_ts": int(time.time()),
            "purchases": [],
            "refunds": [],
            "pending": [],
            "notes": ""
        }
        logger.debug(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ CRM –¥–ª—è {username} ({user_id})")
    elif username and cortex.crm_data[user_id].get("username") != username:
        cortex.crm_data[user_id]["username"] = username # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    
    cortex.crm_data[user_id]["last_contact_ts"] = int(time.time())
    return cortex.crm_data[user_id]

def update_order_in_crm(cortex: Cortex, order_id: str, buyer_id: int, buyer_username: str, status: OrderStatuses):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ CRM-–ø—Ä–æ—Ñ–∏–ª–µ –∫–ª–∏–µ–Ω—Ç–∞."""
    customer = get_or_create_customer(cortex, buyer_id, buyer_username)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    for status_list in ['purchases', 'refunds', 'pending']:
        if order_id in customer.get(status_list, []):
            customer[status_list].remove(order_id)
            
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω—É–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if status == OrderStatuses.CLOSED:
        if order_id not in customer.get('purchases', []): customer.setdefault('purchases', []).append(order_id)
    elif status == OrderStatuses.REFUNDED:
        if order_id not in customer.get('refunds', []): customer.setdefault('refunds', []).append(order_id)
    elif status == OrderStatuses.PAID:
        if order_id not in customer.get('pending', []): customer.setdefault('pending', []).append(order_id)

    save_crm_data(cortex)

def crm_initial_scan(cortex: Cortex):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è CRM."""
    if cortex.crm_data:
        logger.info("CRM –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return

    logger.info("CRM-–±–∞–∑–∞ –ø—É—Å—Ç–∞. –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂...")
    if cortex.telegram and list(cortex.telegram.authorized_users.keys()):
        try:
            cortex.telegram.bot.send_message(list(cortex.telegram.authorized_users.keys())[0],
                                             "üìä –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è CRM. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è CRM: {e}")
    
    total_processed = 0
    for account_name, account in cortex.accounts.items():
        logger.info(f"–°–∫–∞–Ω–∏—Ä—É—é –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {account_name}...")
        next_order_id, batch, locale, subcs = account.get_sales()
        while True:
            if not batch:
                break
            for sale in batch:
                update_order_in_crm(cortex, sale.id, sale.buyer_id, sale.buyer_username, sale.status)
                total_processed += 1
            if not next_order_id:
                break
            time.sleep(1)
            next_order_id, batch, _, _ = account.get_sales(start_from=next_order_id, locale=locale, sudcategories=subcs)

    save_crm_data(cortex)
    logger.info(f"–ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ CRM –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –∑–∞–∫–∞–∑–æ–≤.")
    if cortex.telegram and list(cortex.telegram.authorized_users.keys()):
        try:
            cortex.telegram.bot.send_message(list(cortex.telegram.authorized_users.keys())[0],
                                             f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ CRM –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {total_processed} –∑–∞–∫–∞–∑–∞—Ö.")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è CRM: {e}")

def crm_initial_chat_hook(cortex: Cortex, event: InitialChatEvent):
    """–•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —á–∞—Ç–∞."""
    interlocutor_id = event.account.interlocutor_ids.get(event.chat.id)
    if interlocutor_id:
        get_or_create_customer(cortex, interlocutor_id, event.chat.name)

def crm_new_order_hook(cortex: Cortex, event: NewOrderEvent):
    """–•—É–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ CRM."""
    update_order_in_crm(cortex, event.order.id, event.order.buyer_id, event.order.buyer_username, event.order.status)

def crm_order_status_hook(cortex: Cortex, event: OrderStatusChangedEvent):
    """–•—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤."""
    update_order_in_crm(cortex, event.order.id, event.order.buyer_id, event.order.buyer_username, event.order.status)

def init_crm_cp(cortex: Cortex, *args):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è CRM."""
    load_crm_data(cortex)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫
    Thread(target=crm_initial_scan, args=(cortex,), daemon=True).start()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Ö—É–∫–∏, –Ω–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, /customer_info <username>
    pass

BIND_TO_POST_INIT = [init_crm_cp]
BIND_TO_NEW_ORDER = [crm_new_order_hook]
BIND_TO_INIT_MESSAGE = [crm_initial_chat_hook]
BIND_TO_ORDER_STATUS_CHANGED = [crm_order_status_hook]
# END OF FILE FunPayCortex-main/tg_bot/crm_cp.py