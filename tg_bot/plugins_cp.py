"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –æ–ø–∏—Å–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ü–£ –ø–ª–∞–≥–∏–Ω–∞–º–∏.
–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –≤–∏–¥–µ –ø–ª–∞–≥–∏–Ω–∞.
"""

from __future__ import annotations

import os
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from cardinal import Cortex # Renamed FPCortex to Cortex

from tg_bot import utils, keyboards, CBT
from tg_bot.static_keyboards import CLEAR_STATE_BTN # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
from locales.localizer import Localizer

from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B, Message, CallbackQuery
import datetime
import logging

logger = logging.getLogger("TGBot")
localizer = Localizer()
_ = localizer.translate


def init_plugins_cp(cortex_instance: Cortex, *args):
    tg = cortex_instance.telegram
    bot = tg.bot

    def check_plugin_exists(uuid_to_check: str, message_obj: Message | CallbackQuery) -> bool:
        # pl_not_found_err, gl_refresh —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        chat_id = message_obj.chat.id if isinstance(message_obj, Message) else message_obj.message.chat.id
        message_id = message_obj.id if isinstance(message_obj, Message) else message_obj.message.id
        
        if uuid_to_check not in cortex_instance.plugins:
            update_button = K().add(B(_("gl_refresh"), callback_data=f"{CBT.PLUGINS_LIST}:0"))
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º utils.escape –¥–ª—è UUID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ
            bot.edit_message_text(_("pl_not_found_err", utils.escape(uuid_to_check)), chat_id, message_id,
                                  reply_markup=update_button)
            return False
        return True

    def open_plugins_list(c: CallbackQuery):
        offset = int(c.data.split(":")[1])
        # desc_pl —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
        bot.edit_message_text(_("desc_pl"), c.message.chat.id, c.message.id,
                              reply_markup=keyboards.plugins_list(cortex_instance, offset))
        bot.answer_callback_query(c.id)

    def open_edit_plugin_cp(c: CallbackQuery):
        split_data = c.data.split(":")
        plugin_uuid, offset_str = split_data[1], split_data[2]
        offset = int(offset_str)

        if not check_plugin_exists(plugin_uuid, c): # –ü–µ—Ä–µ–¥–∞–µ–º CallbackQuery
            bot.answer_callback_query(c.id)
            return

        plugin_obj = cortex_instance.plugins[plugin_uuid]
        # pl_author, gl_last_update —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        # –î–æ–±–∞–≤–∏–º –∫–ª—é—á pl_status_active = "–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω üöÄ" –∏ pl_status_inactive = "–°—Ç–∞—Ç—É—Å: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω üí§"
        status_text = _("pl_status_active") if plugin_obj.enabled else _("pl_status_inactive")
        
        text_to_send = f"""üß© <b>{utils.escape(plugin_obj.name)} v{utils.escape(plugin_obj.version)}</b>
{status_text}

üìù <i>{utils.escape(plugin_obj.description)}</i>

üÜî <b>UUID:</b> <code>{utils.escape(plugin_obj.uuid)}</code>
üë®‚Äçüíª <b>{_('pl_author')}:</b> {utils.escape(plugin_obj.credits)}

‚è±Ô∏è <i>{_('gl_last_update')}:</i>  <code>{datetime.datetime.now().strftime('%H:%M:%S %d.%m.%Y')}</code>""" # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞

        keyboard_to_send = keyboards.edit_plugin(cortex_instance, plugin_uuid, offset) # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞

        bot.edit_message_text(text_to_send, c.message.chat.id, c.message.id, reply_markup=keyboard_to_send)
        bot.answer_callback_query(c.id)

    def open_plugin_commands(c: CallbackQuery):
        split_data = c.data.split(":")
        plugin_uuid, offset_str = split_data[1], split_data[2]
        offset = int(offset_str)

        if not check_plugin_exists(plugin_uuid, c): # –ü–µ—Ä–µ–¥–∞–µ–º CallbackQuery
            bot.answer_callback_query(c.id)
            return

        plugin_obj = cortex_instance.plugins[plugin_uuid]
        
        if not plugin_obj.commands: # –ï—Å–ª–∏ —É –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥
            # –î–æ–±–∞–≤–∏–º –∫–ª—é—á pl_no_commands = "–£ —ç—Ç–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            bot.answer_callback_query(c.id, _("pl_no_commands", language=localizer.current_language), show_alert=True)
            return

        commands_text_list = []
        for cmd_key, help_text_key_in_plugin in plugin_obj.commands.items():
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞–≥–∏–Ω–∞
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–ª—é—á –≤–∏–¥–∞ UUID_help_text_key, –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ help_text_key
            translated_help = localizer.plugin_translate(plugin_obj.uuid, help_text_key_in_plugin)
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞—à–µ–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∫–∞–∫ –µ—Å—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ)
            if translated_help == f"{plugin_obj.uuid}_{help_text_key_in_plugin}" or translated_help == help_text_key_in_plugin:
                 final_help_text = help_text_key_in_plugin # –∏–ª–∏ _(help_text_key_in_plugin, language=localizer.current_language) –µ—Å–ª–∏ –∫–ª—é—á–∏ –æ–±—â–∏–µ
            else:
                 final_help_text = translated_help

            commands_text_list.append(f"<code>/{utils.escape(cmd_key)}</code> - {utils.escape(final_help_text)}")

        commands_display_text = "\n\n".join(commands_text_list)
        # pl_commands_list —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
        text_to_send = f"{_('pl_commands_list', utils.escape(plugin_obj.name))}\n\n{commands_display_text}"
        # gl_back —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
        keyboard_reply = K().add(B(_("gl_back"), callback_data=f"{CBT.EDIT_PLUGIN}:{plugin_uuid}:{offset}"))

        bot.edit_message_text(text_to_send, c.message.chat.id, c.message.id, reply_markup=keyboard_reply)
        bot.answer_callback_query(c.id)


    def toggle_plugin(c: CallbackQuery):
        split_data = c.data.split(":")
        plugin_uuid, offset_str = split_data[1], split_data[2]
        offset = int(offset_str)

        if not check_plugin_exists(plugin_uuid, c): # –ü–µ—Ä–µ–¥–∞–µ–º CallbackQuery
            bot.answer_callback_query(c.id)
            return

        cortex_instance.toggle_plugin(plugin_uuid) # –ú–µ—Ç–æ–¥ —Å–∞–º –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ enabled
        
        plugin_name = cortex_instance.plugins[plugin_uuid].name
        # log_pl_activated, log_pl_deactivated —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        log_message_key = "log_pl_activated" if cortex_instance.plugins[plugin_uuid].enabled else "log_pl_deactivated"
        logger.info(_(log_message_key, c.from_user.username, c.from_user.id, plugin_name))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞–≥–∏–Ω–µ
        c.data = f"{CBT.EDIT_PLUGIN}:{plugin_uuid}:{offset}" 
        open_edit_plugin_cp(c) # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –∫–æ–ª–±—ç–∫

    def ask_delete_plugin(c: CallbackQuery):
        split_data = c.data.split(":")
        plugin_uuid, offset_str = split_data[1], split_data[2]
        offset = int(offset_str)

        if not check_plugin_exists(plugin_uuid, c): # –ü–µ—Ä–µ–¥–∞–µ–º CallbackQuery
            bot.answer_callback_query(c.id)
            return
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ keyboards.edit_plugin —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        bot.edit_message_reply_markup(c.message.chat.id, c.message.id,
                                      reply_markup=keyboards.edit_plugin(cortex_instance, plugin_uuid, offset, ask_to_delete=True))
        bot.answer_callback_query(c.id)

    def cancel_delete_plugin(c: CallbackQuery): # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–µ—Ç" –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
        split_data = c.data.split(":")
        plugin_uuid, offset_str = split_data[1], split_data[2]
        offset = int(offset_str)

        if not check_plugin_exists(plugin_uuid, c): # –ü–µ—Ä–µ–¥–∞–µ–º CallbackQuery
            bot.answer_callback_query(c.id)
            return
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞
        bot.edit_message_reply_markup(c.message.chat.id, c.message.id,
                                      reply_markup=keyboards.edit_plugin(cortex_instance, plugin_uuid, offset, ask_to_delete=False))
        bot.answer_callback_query(c.id)

    def delete_plugin(c: CallbackQuery):
        split_data = c.data.split(":")
        plugin_uuid, offset_str = split_data[1], split_data[2]
        offset = int(offset_str)

        if not check_plugin_exists(plugin_uuid, c): # –ü–µ—Ä–µ–¥–∞–µ–º CallbackQuery
            bot.answer_callback_query(c.id)
            return

        plugin_to_delete = cortex_instance.plugins.get(plugin_uuid) # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–ª–∞–≥–∏–Ω–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        if not plugin_to_delete: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            bot.answer_callback_query(c.id, _("pl_not_found_err", utils.escape(plugin_uuid)), show_alert=True)
            return

        plugin_path_to_delete = plugin_to_delete.path
        plugin_name_for_log_and_msg = plugin_to_delete.name # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è

        if not os.path.exists(plugin_path_to_delete):
            # pl_file_not_found_err —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
            bot.answer_callback_query(c.id, _("pl_file_not_found_err", utils.escape(plugin_path_to_delete)),
                                      show_alert=True)
            # –£–¥–∞–ª—è–µ–º –ø–ª–∞–≥–∏–Ω –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "—Ñ–∞–Ω—Ç–æ–º–æ–≤"
            if plugin_uuid in cortex_instance.plugins:
                cortex_instance.plugins.pop(plugin_uuid)
            c.data = f"{CBT.PLUGINS_LIST}:{offset}"
            open_plugins_list(c) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            return

        if plugin_to_delete.delete_handler:
            try:
                plugin_to_delete.delete_handler(cortex_instance, c) # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            except Exception as e:
                # log_pl_delete_handler_err —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
                logger.error(_("log_pl_delete_handler_err", plugin_name_for_log_and_msg))
                logger.debug(f"–û—à–∏–±–∫–∞ –≤ delete_handler –ø–ª–∞–≥–∏–Ω–∞ {plugin_name_for_log_and_msg}: {e}")
                logger.debug("TRACEBACK", exc_info=True)
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ
                # –î–æ–±–∞–≤–∏–º –∫–ª—é—á pl_delete_handler_failed = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ {plugin_name}. –ü–ª–∞–≥–∏–Ω —É–¥–∞–ª–µ–Ω, –Ω–æ –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è –µ–≥–æ –¥–∞–Ω–Ω—ã–µ."
                bot.answer_callback_query(c.id, _("pl_delete_handler_failed", plugin_name=utils.escape(plugin_name_for_log_and_msg), language=localizer.current_language), show_alert=True)
        
        try:
            os.remove(plugin_path_to_delete)
            logger.info(_("log_pl_deleted", c.from_user.username, c.from_user.id, plugin_name_for_log_and_msg))
            if plugin_uuid in cortex_instance.plugins: # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
                cortex_instance.plugins.pop(plugin_uuid)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º offset
            all_plugins_after_delete = list(sorted(cortex_instance.plugins.keys(), key=lambda x_uuid: cortex_instance.plugins[x_uuid].name.lower()))
            new_offset = max(0, offset - MENU_CFG.PLUGINS_BTNS_AMOUNT if offset >= MENU_CFG.PLUGINS_BTNS_AMOUNT and len(all_plugins_after_delete) < offset + MENU_CFG.PLUGINS_BTNS_AMOUNT else offset)
            new_offset = 0 if len(all_plugins_after_delete) <= MENU_CFG.PLUGINS_BTNS_AMOUNT else new_offset

            c.data = f"{CBT.PLUGINS_LIST}:{new_offset}"
            open_plugins_list(c) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
             # –î–æ–±–∞–≤–∏–º –∫–ª—é—á pl_deleted_successfully = "–ü–ª–∞–≥–∏–Ω '{plugin_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
            bot.answer_callback_query(c.id, _("pl_deleted_successfully", plugin_name=utils.escape(plugin_name_for_log_and_msg), language=localizer.current_language), show_alert=True)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞ {plugin_path_to_delete}: {e}")
            # –î–æ–±–∞–≤–∏–º –∫–ª—é—á pl_file_delete_error = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞ '{plugin_path}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."
            bot.answer_callback_query(c.id, _("pl_file_delete_error", plugin_path=utils.escape(plugin_path_to_delete), language=localizer.current_language), show_alert=True)


    def act_upload_plugin(obj: CallbackQuery | Message):
        # pl_new —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
        text_prompt = _("pl_new") 
        
        if isinstance(obj, CallbackQuery):
            offset = int(obj.data.split(":")[1])
            result = bot.send_message(obj.message.chat.id, text_prompt, reply_markup=CLEAR_STATE_BTN())
            tg.set_state(obj.message.chat.id, result.id, obj.from_user.id, CBT.UPLOAD_PLUGIN, {"offset": offset})
            bot.answer_callback_query(obj.id)
        elif isinstance(obj, Message): # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /upload_plugin
            result = bot.send_message(obj.chat.id, text_prompt, reply_markup=CLEAR_STATE_BTN())
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é offset 0, –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π
            tg.set_state(obj.chat.id, result.id, obj.from_user.id, CBT.UPLOAD_PLUGIN, {"offset": 0}) 

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    tg.cbq_handler(open_plugins_list, lambda c: c.data.startswith(f"{CBT.PLUGINS_LIST}:"))
    tg.cbq_handler(open_edit_plugin_cp, lambda c: c.data.startswith(f"{CBT.EDIT_PLUGIN}:"))
    tg.cbq_handler(open_plugin_commands, lambda c: c.data.startswith(f"{CBT.PLUGIN_COMMANDS}:"))
    tg.cbq_handler(toggle_plugin, lambda c: c.data.startswith(f"{CBT.TOGGLE_PLUGIN}:"))

    tg.cbq_handler(ask_delete_plugin, lambda c: c.data.startswith(f"{CBT.DELETE_PLUGIN}:"))
    tg.cbq_handler(cancel_delete_plugin, lambda c: c.data.startswith(f"{CBT.CANCEL_DELETE_PLUGIN}:"))
    tg.cbq_handler(delete_plugin, lambda c: c.data.startswith(f"{CBT.CONFIRM_DELETE_PLUGIN}:"))

    tg.cbq_handler(act_upload_plugin, lambda c: c.data.startswith(f"{CBT.UPLOAD_PLUGIN}:"))
    tg.msg_handler(act_upload_plugin, commands=["upload_plugin"]) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã


BIND_TO_PRE_INIT = [init_plugins_cp]